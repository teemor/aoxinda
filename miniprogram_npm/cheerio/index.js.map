{"version":3,"sources":["index.js","lib\\cheerio.js","lib\\parse.js","lib\\utils.js","lib\\static.js","lib\\render.js"],"names":[],"mappingsaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\n * Export cheerio (with )\n */\n\nexports = module.exports = process.env.CHEERIO_COV\n  ? require('./lib-cov/cheerio')\n  : require('./lib/cheerio');\n\n/*\n  Export the version\n*/\n\nexports.version = require('./package').version;\n","/*\n  Module dependencies\n*/\n\nvar path = require('path'),\n    select = require('cheerio-select'),\n    parse = require('./parse'),\n    evaluate = parse.evaluate,\n    updateDOM = parse.update,\n    isArray = Array.isArray,\n    _ = require('underscore');\n\n/*\n * The API\n */\n\nvar api = ['attributes', 'traversing', 'manipulation'];\n\n/*\n * A simple way to check for HTML strings or ID strings\n */\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n\n/**\n * Static Methods\n */\n\nvar $ = require('./static');\n\n/*\n * Instance of cheerio\n */\n\nvar Cheerio = module.exports = function(selector, context, root) {\n  if(!(this instanceof Cheerio)) return new Cheerio(selector, context, root);\n\n  // $(), $(null), $(undefined), $(false)\n  if(!selector) return this;\n\n  if(root) {\n    if(typeof root === 'string') root = parse(root);\n    this._root = this.make(root, this);\n  }\n\n  // $($)\n  if(selector.cheerio) return selector;\n\n  // $(dom)\n  if(selector.name || isArray(selector))\n    return this.make(selector, this);\n\n  // $(<html>)\n  if(typeof selector === 'string' && isHtml(selector)) {\n    return this.make(parse(selector).children);\n  }\n\n  // If we don't have a context, maybe we have a root, from loading\n  if(!context) {\n    context = this._root;\n  } else if(typeof context === 'string') {\n    if(isHtml(context)) {\n      // $('li', '<ul>...</ul>')\n      context = parse(context).children;\n      context = this.make(context, this);\n    } else {\n      // $('li', 'ul')\n      selector = [context, selector].join(' ');\n      context = this._root;\n    }\n  }\n\n  // If we still don't have a context, return\n  if(!context) return this;\n\n  // #id, .class, tag\n  return context.find(selector);\n};\n\n/**\n * Inherit from `static`\n */\n\nCheerio.__proto__ = require('./static');\n\n/*\n * Set a signature of the object\n */\n\nCheerio.prototype.cheerio = '[cheerio object]';\n\n/*\n * Cheerio default options\n */\n\nCheerio.prototype.options = {\n  ignoreWhitespace : false,\n  xmlMode : false,\n  lowerCaseTags : false\n};\n\n/*\n * Make cheerio an array-like object\n */\n\nCheerio.prototype.length = 0;\nCheerio.prototype.sort = [].splice;\n\n/*\n * Check if string is HTML\n */\nfunction isHtml(str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if ( str.charAt(0) === \"<\" && str.charAt( str.length - 1 ) === \">\" && str.length >= 3 ) return true;\n\n  // Run the regex\n  var match = quickExpr.exec(str);\n  return (match && match[1]) ? true : false;\n}\n\n/*\n * Make a cheerio object\n */\n\nCheerio.prototype.make = function(dom, context) {\n  if(dom.cheerio) return dom;\n  dom = (_.isArray(dom)) ? dom : [dom];\n  return _.extend(context || new Cheerio(), dom, { length : dom.length });\n};\n\n/**\n * Turn a cheerio object into an array\n */\n\nCheerio.prototype.toArray = function() {\n  return [].slice.call(this, 0);\n};\n\n/**\n * Plug in the API\n */\napi.forEach(function(mod) {\n  _.extend(Cheerio.prototype, require('./api/' + mod));\n});\n","/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2'),\n    _ = require('underscore'),\n    isTag = require('./utils').isTag,\n    isArray = Array.isArray;\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options) {\n  var dom = evaluate(content, options);\n\n  // Generic root element\n  var root = {\n    type : 'root',\n    name : 'root',\n    parent : null,\n    prev : null,\n    next : null,\n    children : []\n  };\n\n  // Update the dom using the root\n  update(dom, root);\n\n  return root;\n};\n\nvar evaluate = exports.evaluate = function(content, options) {\n  // options = options || $.fn.options;\n\n  var handler = new htmlparser.DomHandler(options),\n      parser = new htmlparser.Parser(handler, options);\n\n  parser.write(content);\n  parser.done();\n\n  return connect(handler.dom);\n};\n\nvar connect = exports.connect = function(dom, parent) {\n  parent = parent || null;\n\n  var prevElem = null;\n\n  _.each(dom, function(elem) {\n    // If tag and no attributes, add empty object\n    if (isTag(elem.type) && elem.attribs === undefined)\n      elem.attribs = {};\n\n    // Set parent\n    elem.parent = parent;\n\n    // Previous Sibling\n    elem.prev = prevElem;\n\n    // Next sibling\n    elem.next = null;\n    if (prevElem) prevElem.next = elem;\n\n    // Run through the children\n    if (elem.children)\n      connect(elem.children, elem);\n    else if (isTag(elem.type))\n      elem.children = [];\n\n    // Get ready for next element\n    prevElem = elem;\n  });\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n\n  * Much faster than reconnecting\n*/\nvar update = exports.update = function(arr, parent) {\n  // normalize\n  arr = isArray(arr) ? arr : [arr];\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    arr[i].prev = arr[i-1] || null;\n    arr[i].next = arr[i+1] || null;\n    arr[i].parent = parent || null;\n  }\n\n  // Update parent\n  parent.children = arr;\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n","/**\n * Module Dependencies\n */\nvar entities = require('entities');\n\n/**\n * HTML Tags\n */\n\nvar tags = { tag : true, script : true, style : true };\n\n/**\n * Check if the DOM element is a tag\n *\n * isTag(type) includes <script> and <style> tags\n */\n\nexports.isTag = function(type) {\n  if (type.type) type = type.type;\n  return tags[type] || false;\n};\n\n/**\n * Expose encode and decode methods from FB55's node-entities library\n *\n * 0 = XML, 1 = HTML4 and 2 = HTML5\n */\n\nexports.encode = function(str) { return entities.encode(String(str), 0); };\nexports.decode = function(str) { return entities.decode(str, 2); };\n","/**\n * Module dependencies\n */\n\nvar select = require('cheerio-select'),\n    parse = require('./parse'),\n    render = require('./render'),\n    decode = require('./utils').decode;\n\n/**\n * $.load(str)\n */\n\nvar load = exports.load = function(str, options) {\n  var Cheerio = require('./cheerio'),\n      root = parse(str, options);\n\n  function initialize(selector, context, r) {\n    return new Cheerio(selector, context, r || root);\n  }\n\n  // Add in the static methods\n  initialize.__proto__ = exports;\n\n  // Add in the root\n  initialize._root = root;\n\n  return initialize;\n};\n\n/**\n * $.html([selector | dom])\n */\n\nvar html = exports.html = function(dom) {\n  if (dom) {\n    dom = (typeof dom === 'string') ? select(dom, this._root) : dom;\n    return render(dom);\n  } else if (this._root && this._root.children) {\n    return render(this._root.children);\n  } else {\n    return '';\n  }\n};\n\n/**\n * $.text(dom)\n */\n\nvar text = exports.text = function(elems) {\n  if (!elems) return '';\n\n  var ret = '',\n      len = elems.length,\n      elem;\n\n  for (var i = 0; i < len; i ++) {\n    elem = elems[i];\n    if (elem.type === 'text') ret += decode(elem.data);\n    else if (elem.children && elem.type !== 'comment') {\n      ret += text(elem.children);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * $.root()\n */\nvar root = exports.root = function() {\n  return this(this._root);\n};\n","/*\n  Module dependencies\n*/\nvar _ = require('underscore'),\n    isArray = Array.isArray;\n\n/*\n  Boolean Attributes\n*/\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n\n/*\n  Format attributes\n*/\nvar formatAttrs = function(attributes) {\n  if (!attributes) return '';\n\n  var output = [],\n      value;\n\n  // Loop through the attributes\n  for (var key in attributes) {\n    value = attributes[key];\n    if (!value && (rboolean.test(key) || key === '/')) {\n      output.push(key);\n    } else {\n      output.push(key + '=\"' + value + '\"');\n    }\n  }\n\n  return output.join(' ');\n};\n\n/*\n  Self-enclosing tags (stolen from node-htmlparser)\n*/\nvar singleTag = {\n  area: 1,\n  base: 1,\n  basefont: 1,\n  br: 1,\n  col: 1,\n  frame: 1,\n  hr: 1,\n  img: 1,\n  input: 1,\n  isindex: 1,\n  link: 1,\n  meta: 1,\n  param: 1,\n  embed: 1,\n  include: 1,\n  'yield': 1\n};\n\n/*\n  Tag types from htmlparser\n*/\nvar tagType = {\n  tag : 1,\n  script : 1,\n  link : 1,\n  style : 1,\n  template : 1\n};\n\nrender = module.exports = function(dom, opts) {\n  dom = (isArray(dom) || dom.cheerio) ? dom : [dom];\n  opts = opts || {};\n\n  var output = [],\n      xmlMode = opts.xmlMode || false,\n      ignoreWhitespace = opts.ignoreWhitespace || false;\n\n  _.each(dom, function(elem) {\n    var pushVal;\n\n    if (tagType[elem.type])\n      pushVal = renderTag(elem);\n    else if (elem.type === 'directive')\n      pushVal = renderDirective(elem);\n    else if (elem.type === 'comment')\n      pushVal = renderComment(elem);\n    else\n      pushVal = renderText(elem);\n\n    // Push rendered DOM node\n    output.push(pushVal);\n\n    if (elem.children)\n      output.push(render(elem.children, opts));\n\n    if ((!singleTag[elem.name] || xmlMode) && tagType[elem.type])\n      output.push('</' + elem.name + '>');\n  });\n\n  return output.join('');\n};\n\nvar renderTag = function(elem) {\n  var tag = '<' + elem.name;\n\n  if (elem.attribs && _.size(elem.attribs)) {\n    tag += ' ' + formatAttrs(elem.attribs);\n  }\n  \n  return tag + '>';\n};\n\nvar renderDirective = function(elem) {\n  return '<' + elem.data + '>';\n};\n\nvar renderText = function(elem) {\n  return elem.data;\n};\n\nvar renderComment = function(elem) {\n  return '<!--' + elem.data + '-->';\n};\n\n// module.exports = $.extend(exports);\n"]}