{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\"use strict\";\n\nmodule.exports = parse;\n\nvar re_ws = /^\\s/,\n    re_name = /^(?:\\\\.|[\\w\\-\\u00c0-\\uFFFF])+/,\n    re_escape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/ig,\n    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87\n    re_attr = /^\\s*((?:\\\\.|[\\w\\u00c0-\\uFFFF\\-])+)\\s*(?:(\\S?)=\\s*(?:(['\"])(.*?)\\3|(#?(?:\\\\.|[\\w\\u00c0-\\uFFFF\\-])*)|)|)\\s*(i)?\\]/;\n\nvar actionTypes = {\n\t__proto__: null,\n\t\"undefined\": \"exists\",\n\t\"\":  \"equals\",\n\t\"~\": \"element\",\n\t\"^\": \"start\",\n\t\"$\": \"end\",\n\t\"*\": \"any\",\n\t\"!\": \"not\",\n\t\"|\": \"hyphen\"\n};\n\nvar simpleSelectors = {\n\t__proto__: null,\n\t\">\": \"child\",\n\t\"<\": \"parent\",\n\t\"~\": \"sibling\",\n\t\"+\": \"adjacent\"\n};\n\nvar attribSelectors = {\n\t__proto__: null,\n\t\"#\": [\"id\", \"equals\"],\n\t\".\": [\"class\", \"element\"]\n};\n\n//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139\nfunction funescape( _, escaped, escapedWhitespace ) {\n\tvar high = \"0x\" + escaped - 0x10000;\n\t// NaN means non-codepoint\n\t// Support: Firefox\n\t// Workaround erroneous numeric interpretation of +\"0x\"\n\treturn high !== high || escapedWhitespace ?\n\t\tescaped :\n\t\t// BMP codepoint\n\t\thigh < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n}\n\nfunction unescapeCSS(str){\n\treturn str.replace(re_escape, funescape);\n}\n\nfunction getClosingPos(selector){\n\tvar pos = 1, counter = 1, len = selector.length;\n\n\tfor(; counter > 0 && pos < len; pos++){\n\t\tif(selector.charAt(pos) === \"(\") counter++;\n\t\telse if(selector.charAt(pos) === \")\") counter--;\n\t}\n\n\treturn pos;\n}\n\nfunction parse(selector, options){\n\tselector = (selector + \"\").trimLeft();\n\n\tvar subselects = [],\n\t    tokens = [],\n\t    sawWS = false,\n\t    data, firstChar, name;\n\t\n\tfunction getName(){\n\t\tvar sub = selector.match(re_name)[0];\n\t\tselector = selector.substr(sub.length);\n\t\treturn unescapeCSS(sub);\n\t}\n\n\twhile(selector !== \"\"){\n\t\tif(re_name.test(selector)){\n\t\t\tif(sawWS){\n\t\t\t\ttokens.push({type: \"descendant\"});\n\t\t\t\tsawWS = false;\n\t\t\t}\n\n\t\t\tname = getName();\n\n\t\t\tif(!options || (\"lowerCaseTags\" in options ? options.lowerCaseTags : !options.xmlMode)){\n\t\t\t\tname = name.toLowerCase();\n\t\t\t}\n\n\t\t\ttokens.push({type: \"tag\", name: name});\n\t\t} else if(re_ws.test(selector)){\n\t\t\tsawWS = true;\n\t\t\tselector = selector.trimLeft();\n\t\t} else {\n\t\t\tfirstChar = selector.charAt(0);\n\t\t\tselector = selector.substr(1);\n\n\t\t\tif(firstChar in simpleSelectors){\n\t\t\t\ttokens.push({type: simpleSelectors[firstChar]});\n\t\t\t\tselector = selector.trimLeft();\n\t\t\t\tsawWS = false;\n\t\t\t\tcontinue;\n\t\t\t} else if(firstChar === \",\"){\n\t\t\t\tif(tokens.length === 0){\n\t\t\t\t\tthrow new SyntaxError(\"empty sub-selector\");\n\t\t\t\t}\n\t\t\t\tsubselects.push(tokens);\n\t\t\t\ttokens = [];\n\n\t\t\t\tselector = selector.trimLeft();\n\t\t\t\tsawWS = false;\n\t\t\t\tcontinue;\n\t\t\t} else if(sawWS){\n\t\t\t\ttokens.push({type: \"descendant\"});\n\t\t\t\tsawWS = false;\n\t\t\t}\n\n\t\t\tif(firstChar === \"*\"){\n\t\t\t\ttokens.push({type: \"universal\"});\n\t\t\t} else if(firstChar in attribSelectors){\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: \"attribute\",\n\t\t\t\t\tname: attribSelectors[firstChar][0],\n\t\t\t\t\taction: attribSelectors[firstChar][1],\n\t\t\t\t\tvalue: getName(),\n\t\t\t\t\tignoreCase: false\n\t\t\t\t});\n\t\t\t} else if(firstChar === \"[\"){\n\t\t\t\tdata = selector.match(re_attr);\n\t\t\t\tif(!data){\n\t\t\t\t\tthrow new SyntaxError(\"Malformed attribute selector: \" + selector);\n\t\t\t\t}\n\t\t\t\tselector = selector.substr(data[0].length);\n\t\t\t\tname = unescapeCSS(data[1]);\n\n\t\t\t\tif(\n\t\t\t\t\t!options || (\n\t\t\t\t\t\t\"lowerCaseAttributeNames\" in options ?\n\t\t\t\t\t\t\toptions.lowerCaseAttributeNames :\n\t\t\t\t\t\t\t!options.xmlMode\n\t\t\t\t\t)\n\t\t\t\t){\n\t\t\t\t\tname = name.toLowerCase();\n\t\t\t\t}\n\n\t\t\t\ttokens.push({\n\t\t\t\t\ttype: \"attribute\",\n\t\t\t\t\tname: name,\n\t\t\t\t\taction: actionTypes[data[2]],\n\t\t\t\t\tvalue: unescapeCSS(data[4] || data[5] || \"\"),\n\t\t\t\t\tignoreCase: !!data[6]\n\t\t\t\t});\n\t\t\t\t\n\t\t\t} else if(firstChar === \":\"){\n\t\t\t\t//if(selector.charAt(0) === \":\"){} //TODO pseudo-element\n\t\t\t\tname = getName().toLowerCase();\n\t\t\t\tdata = null;\n\t\t\t\t\n\t\t\t\tif(selector.charAt(0) === \"(\"){\n\t\t\t\t\tvar pos = getClosingPos(selector);\n\t\t\t\t\tdata = selector.substr(1, pos - 2);\n\t\t\t\t\tselector = selector.substr(pos);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttokens.push({type: \"pseudo\", name: name, data: data});\n\t\t\t} else {\n\t\t\t\t//otherwise, the parser needs to throw or it would enter an infinite loop\n\t\t\t\tthrow new SyntaxError(\"Unmatched selector: \" + firstChar + selector);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(subselects.length > 0 && tokens.length === 0){\n\t\tthrow new SyntaxError(\"empty sub-selector\");\n\t}\n\tsubselects.push(tokens);\n\treturn subselects;\n}"]}